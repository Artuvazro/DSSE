<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="about" xml:space="preserve">
    <value>About</value>
  </data>
  <data name="aboutText" xml:space="preserve">
    <value>Information about this program</value>
  </data>
  <data name="ATtip" xml:space="preserve">
    <value>This segment has been automatically translated from memory</value>
  </data>
  <data name="authorLabel" xml:space="preserve">
    <value>Author:</value>
  </data>
  <data name="copyText" xml:space="preserve">
    <value>Copy original text to translation
(F1)</value>
  </data>
  <data name="fileOpen" xml:space="preserve">
    <value>Open</value>
  </data>
  <data name="fileOpenDesc" xml:space="preserve">
    <value>Select the Event folder that contains the texts</value>
  </data>
  <data name="fileOpenErrText" xml:space="preserve">
    <value>This is not the folder that contains the files with the texts</value>
  </data>
  <data name="fileOpenErrTitle" xml:space="preserve">
    <value>Invalid Path</value>
  </data>
  <data name="fileOpenText" xml:space="preserve">
    <value>Choose the path of the Event folder</value>
  </data>
  <data name="fileOpenTextSub" xml:space="preserve">
    <value>Open (Ctrl+O)</value>
  </data>
  <data name="fileSave" xml:space="preserve">
    <value>Save</value>
  </data>
  <data name="fileSaveErrText" xml:space="preserve">
    <value>You have to open the Event folder with the 'Open' button before creating the new translated files.</value>
  </data>
  <data name="fileSaveErrTitle" xml:space="preserve">
    <value>Warning</value>
  </data>
  <data name="fileSaveText" xml:space="preserve">
    <value>Generate the new translated files</value>
  </data>
  <data name="fileSaveTextSub" xml:space="preserve">
    <value>Save (Ctrl+S)</value>
  </data>
  <data name="filesLabel" xml:space="preserve">
    <value>Files</value>
  </data>
  <data name="jumpToText" xml:space="preserve">
    <value>Write a number here and press Enter to jump to that segment
(Ctrl+G)</value>
  </data>
  <data name="lines" xml:space="preserve">
    <value>Lines: </value>
  </data>
  <data name="nextSegText" xml:space="preserve">
    <value>Next segment
(F5)</value>
  </data>
  <data name="openAny" xml:space="preserve">
    <value>&lt;Open any file to start&gt;</value>
  </data>
  <data name="openInNoteText" xml:space="preserve">
    <value>Open the file with a text editor</value>
  </data>
  <data name="originalLabel" xml:space="preserve">
    <value>Original</value>
  </data>
  <data name="outputFinishText" xml:space="preserve">
    <value>All files have been generated properly in the Output folder</value>
  </data>
  <data name="outputFinishTitle" xml:space="preserve">
    <value>Finished</value>
  </data>
  <data name="prevSegText" xml:space="preserve">
    <value>Previous segment
(F4)</value>
  </data>
  <data name="progressText" xml:space="preserve">
    <value>Creating {0} of {1}</value>
  </data>
  <data name="progressTextFinished" xml:space="preserve">
    <value>Finished!</value>
  </data>
  <data name="syntaxErr" xml:space="preserve">
    <value>Syntax error...</value>
  </data>
  <data name="tagBlueText" xml:space="preserve">
    <value>Add blue text</value>
  </data>
  <data name="tagCommasText" xml:space="preserve">
    <value>Add inverted commas</value>
  </data>
  <data name="tagLabel" xml:space="preserve">
    <value>Tags</value>
  </data>
  <data name="tagNewText" xml:space="preserve">
    <value>Add a new text block</value>
  </data>
  <data name="tagYellowText" xml:space="preserve">
    <value>Add yellow text</value>
  </data>
  <data name="thanksLabel" xml:space="preserve">
    <value>Acknowledgements:</value>
  </data>
  <data name="thanksText" xml:space="preserve">
    <value>DarthNemesis y Nintenlord
(LZ77 compression)

CUE
(Information about the structure of the files)

David Fens
("Devil Survivor" font for Windows)
                
KenshinX
(Russian compatibility)

Yusuke Kamiyamane
(Icon set)</value>
  </data>
  <data name="translationLabel" xml:space="preserve">
    <value>Translation</value>
  </data>
  <data name="words" xml:space="preserve">
    <value>Words: </value>
  </data>
  <data name="copyAllText" xml:space="preserve">
    <value>Copy original text to translation for all the file starting in the actual segment until reaching the last one.
(F9)</value>
  </data>
  <data name="toomanylines" xml:space="preserve">
    <value>More than 3 lines detected!</value>
  </data>
</root>